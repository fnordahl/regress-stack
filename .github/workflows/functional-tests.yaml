name: Functional Tests

on:
  workflow_call:
  workflow_dispatch:
    inputs:
      ppa:
        required: false
        type: string
      release:
        description: "JSON encoded list of releases."
        required: false
        type: string

jobs:
  metadata:
    name: Ubuntu supported releases
    runs-on: ubuntu-latest
    outputs:
      releases: ${{ steps.generate-releases.outputs.releases }}
    steps:
      - name: Query Launchpad for supported releases
        id: generate-releases
        run: |
          set -euxo pipefail
          echo -n releases= >> ${GITHUB_OUTPUT}
          curl -s https://api.launchpad.net/devel/ubuntu/series | \
            jq '.entries[] | select(.version >= "22.04" and
                                    (.status == "Supported" or
                                     .status == "Current Stable Release" or
                                     .status == "Active Development" or
                                     .status == "Pre-release Freeze")) |
                .name' | jq -cs | \
            tee -a ${GITHUB_OUTPUT}
          cat ${GITHUB_OUTPUT}
  functional-tests:
    needs:
      - metadata
    strategy:
      fail-fast: false
      matrix:
        release: ${{ inputs.release && fromJson(inputs.release) || fromJson(needs.metadata.outputs.releases) }}
        proposed:
          - ""
          - proposed
        ppa:
          - ""
          - "${{ inputs.ppa || 'ppa:ubuntu-security-proposed/ppa' }}"
        ceph:
          - ""
          - ceph
        exclude:
          - proposed: proposed
            ppa: "${{ inputs.ppa || 'ppa:ubuntu-security-proposed/ppa' }}"
    runs-on: [self-hosted, linux, X64, large, noble]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Install dependencies
      run: |
        set -euxo pipefail
        sudo apt-get update
        sudo apt-get install -yq snapd
        sudo systemctl enable snapd
        sudo systemctl restart snapd
        sudo snap refresh --channel 5.21/stable lxd \
            || sudo snap install --channel 5.21/stable lxd
        sudo snap install --channel 1.24/stable --classic go
        cd spread
        go install ./...

    - name: Clear FORWARD firewall rules
      run: |
        set -euxo pipefail
        # Docker can inject rules causing firewall conflicts
        sudo iptables -P FORWARD ACCEPT  || true
        sudo ip6tables -P FORWARD ACCEPT || true
        sudo iptables -F FORWARD  || true
        sudo ip6tables -F FORWARD || true

    - name: Configure LXD
      run: |
        set -euxo pipefail
        sudo snap set lxd daemon.group=adm
        sudo lxd init --auto

    - name: Spread
      id: spread
      run: |
        set -euxo pipefail
        nproc
        free -h
        df -h

        artifact_name=ubuntu-${{ matrix.release }}
        if [ -n "${{ matrix.proposed }}" ]; then
          artifact_name+=-proposed
        fi
        if [ -n "${{ matrix.ppa }}" ]; then
          artifact_name+=-ppa
        fi
        if [ -n "${{ matrix.ceph }}" ]; then
          artifact_name+=-ceph
        fi
        echo "artifact_name=${artifact_name}" >> $GITHUB_OUTPUT

        export RELEASES="${{ matrix.release }}"
        APT_POCKETS="${{ matrix.proposed }}"
        export APT_POCKETS=${APT_POCKETS:-false}
        APT_PPAS="${{ matrix.ppa }}"
        export APT_PPAS=${APT_PPAS:-false}
        export FEATURE_ENABLE_CEPH="${{ matrix.ceph }}"
        PLAN=c6-m24 ./boot.sh

        mkdir /tmp/artifacts
        cp spread.yaml /tmp/artifacts/
        $HOME/go/bin/spread -reuse -artifacts /tmp/artifacts

    - name: Sanitize artifacts
      if: always()
      run: |
        set -euxo pipefail
        # The upload-artifact action does not allow colon in paths.
        for dent in /tmp/artifacts/*; do
          sanitized_dent=${dent//:/-}
          if [ "$dent" != "$sanitized_dent" ]; then
            mv -v $dent ${dent//:/-}
          fi
        done

    - name: Artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.spread.outputs.artifact_name }}
        path: /tmp/artifacts/
